# Configuración para desarrollo local
networks:
  app-network:
    name: app-network

services:
  # Servicio principal de la aplicación
  app:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DOCKER_SOCKET=/var/run/docker.sock
      - PORT=3000
      # Configuración para usar el Nginx del contenedor
      - NPM_API=http://host.docker.internal:81/api
      - NPM_API_KEY=3299djk23299djk23
      - NPM_EMAIL=sincrosav@gmail.com
      - NPM_PASSWORD=sincros2808
      - DATABASE_URL=file:./prisma/dev.db
      - NEXT_PUBLIC_DATABASE_DOMAIN=marceloremeseiro.com
      - NEXT_PUBLIC_CENTRAL_SERVER=localhost
      - DEFAULT_CLIENT_SERVER=http://localhost:3001
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /app/node_modules
      - ./prisma/dev.db:/app/prisma/dev.db
    command: >
      sh -c "
        npm install &&
        mkdir -p /app/prisma &&
        npx prisma generate &&
        npx prisma migrate dev &&
        echo 'Esperando a que nginx-proxy-manager esté listo...' &&
        sleep 15 &&
        echo '🔍 Verificando variables de entorno antes de iniciar...' &&
        mkdir -p /app/scripts &&
        echo '#!/usr/bin/env node

        /**
         * Script para verificar las variables de entorno necesarias
         * Este script se ejecuta antes de iniciar la aplicación
         */

        // Lista de variables de entorno requeridas
        const requiredEnvVars = [
          \"NODE_ENV\",
          \"PORT\",
          \"NPM_API\",
          \"NPM_EMAIL\",
          \"NPM_PASSWORD\",
          \"DATABASE_URL\",
          \"DOCKER_SOCKET\",
          \"NEXT_PUBLIC_DATABASE_DOMAIN\",
          \"NEXT_PUBLIC_CENTRAL_SERVER\",
          \"DEFAULT_CLIENT_SERVER\"
        ];

        // Opcional pero recomendado
        const optionalEnvVars = [
          \"NPM_API_KEY\"
        ];

        console.log(\"\n🔍 Verificando variables de entorno...\n\");

        // Verificar variables requeridas
        const missingVars = [];
        for (const envVar of requiredEnvVars) {
          if (!process.env[envVar]) {
            missingVars.push(envVar);
          } else {
            console.log(`✅ ${envVar}: ${maskValue(envVar, process.env[envVar])}`);
          }
        }

        // Verificar variables opcionales
        for (const envVar of optionalEnvVars) {
          if (!process.env[envVar]) {
            console.log(`⚠️ ${envVar}: No definido (opcional)`);
          } else {
            console.log(`✅ ${envVar}: ${maskValue(envVar, process.env[envVar])}`);
          }
        }

        // Verificar NPM_API específicamente
        if (process.env.NPM_API) {
          console.log(`\n🔗 Conexión NPM configurada: ${process.env.NPM_API}`);
          
          // Verificar si estamos usando host.docker.internal
          if (process.env.NPM_API.includes(\"host.docker.internal\")) {
            console.log(\"ℹ️ Usando host.docker.internal para conectar con el host\");
            
            // Verificar si tenemos extra_hosts configurado (no podemos verificarlo aquí, solo informativo)
            console.log(\"⚠️ Asegúrate de que extra_hosts esté configurado en docker-compose.yml\");
          }
        }

        // Verificar DATABASE_URL específicamente
        if (process.env.DATABASE_URL) {
          console.log(`\n💾 Base de datos configurada: ${maskValue(\"DATABASE_URL\", process.env.DATABASE_URL)}`);
        }

        // Mostrar errores si hay variables faltantes
        if (missingVars.length > 0) {
          console.error(\"\n❌ Error: Faltan las siguientes variables de entorno requeridas:\");
          missingVars.forEach(v => console.error(`   - ${v}`));
          console.error(\"\nPor favor, configura estas variables en tu archivo .env o en tu entorno.\");
          process.exit(1);
        } else {
          console.log(\"\n✅ Todas las variables de entorno requeridas están configuradas correctamente.\");
        }

        // Función para enmascarar valores sensibles
        function maskValue(name, value) {
          // Enmascarar contraseñas y tokens
          if (name.includes(\"PASSWORD\") || name.includes(\"KEY\") || name.includes(\"SECRET\") || name.includes(\"TOKEN\")) {
            return value.substring(0, 3) + \"****\" + value.substring(value.length - 3);
          }
          
          // Enmascarar URLs de base de datos
          if (name === \"DATABASE_URL\" && value.includes(\"://\")) {
            const parts = value.split(\"://\");
            const protocol = parts[0];
            const rest = parts[1];
            
            if (rest.includes(\"@\")) {
              const [auth, endpoint] = rest.split(\"@\");
              return `${protocol}://${auth.substring(0, 3)}****@${endpoint}`;
            }
          }
          
          return value;
        }

        console.log(\"\n🚀 Iniciando aplicación...\n\");' > /app/scripts/check-env.js &&
        chmod +x /app/scripts/check-env.js &&
        node /app/scripts/check-env.js &&
        next dev --turbopack
      "
    networks:
      - app-network
    depends_on:
      - nginx-proxy-manager
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Nginx Proxy Manager para desarrollo
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '81:81'
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - ./data/nginx-proxy-manager:/data
      - ./data/letsencrypt:/etc/letsencrypt
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:81" , "||", "exit", "0"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s 